# This file has been built from various dotfile repos and some of my own ideas.
###########################
#  Configuration
###########################
#use 256 term for pretty colors
set -g default-terminal "screen-256color"

# increase scroll-back history
set -g history-limit 5000

# use vim key bindings
setw -g mode-keys vi

# disable mouse
setw -g mode-mouse off

# decrease command delay (increases vim responsiveness)
set -sg escape-time 0

# increase repeat time for repeatable commands
set -g repeat-time 1000

#start window index at 1
set -g base-index 1

# start pane index at 1
setw -g pane-base-index 1

# re-number windows when one is closed
set -g renumber-windows on

# highlight window when it has new activity
setw -g monitor-activity on
set -g visual-activity on

###########################
# Colors
###########################
# Status bar colors set below
# highlight current window
setw -g window-status-current-bg 'colour6'
setw -g window-status-current-fg '#000000'

# set color of active pane
set -g pane-border-fg '#555555'
set -g pane-border-bg black
set -g pane-active-border-fg '#bbbbbb'
set -g pane-active-border-bg black

# # command/message line colors
set-option -g message-fg white
set-option -g message-bg black
set-option -g message-attr bright

###########################
# Status Bar
###########################
# enable utf-8
set -g status-utf8 on

# set refresh interval for status bar
set -g status-interval 30

# enable window titles
set -g set-titles on

# window title string (uses statusbar variables)
# #T      = standard window title (last command, see ~/.bash_profile)
# #h      = short hostname
# #S      = session name
# #W      = tmux window name
# (would love to include #(pwd) here as well, but that would only print the
# current working directory relative to the session -- ie. always the starting
# cwd -- which is not very interesting)
#set -g set-titles-string '#S:#I.#P #W'
#set -g set-titles-string "#T : #h > #S > #W"
set -g set-titles-string '#T'


# status bar with load and time
set -g status-bg 'colour8'
set -g status-fg '#ffffff'
set -g status-justify 'centre'
set -g status-left ' [#S] '
set -g status-right '#[bg=colour8]#[fg=#ffffff][#H][#(~/dotfiles/bin/battery)][#(cut -d " " -f -3 /proc/loadavg)]#[bg=colour8]#[fg=#ffffff]#(date +" %H:%M ")'
set -g window-status-format '(#I| #W)'
set -g window-status-current-format '{#I.#P| #W}'

###########################
#  Key Bindings
###########################
# set the prefix key
unbind C-b
unbind C-a
set -g prefix C-z
bind-key C-a last-window
bind-key a send-key C-a

# bind to reload config
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# refresh
bind-key R      refresh-client

# " windowlist -b
unbind '"'
bind '"' choose-window

#window cycling
bind-key , previous-window # <
bind-key . next-window     # >
bind-key -r <   swap-window -t :-
bind-key -r >   swap-window -t :+

#renaming
bind-key n      command-prompt 'rename-window %%'
bind-key N      command-prompt 'rename-session %%'

# key bindings for horizontal and vertical panes
unbind %
bind | split-window -h
bind \ split-window -h
bind - split-window -v
bind-key _ split-window -v -p 25   # Makes a horizontal 'testing' pane
bind-key / split-window -h -p 33  # Makes a vertical 'testing' pane

# kill K k 
unbind K
unbind k
bind K confirm-before "kill-window"
bind k confirm-before "kill-window"
bind-key X kill-window
bind-key x kill-pane
bind-key q confirm-before kill-session
bind-key Q confirm-before kill-server

# redisplay ^L l 
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

#copy and paste stuff
unbind [
bind Escape copy-mode
# v or space to select
bind-key -t vi-copy 'v' begin-selection
# y to yank, and it goes in primary and clipboard buffers
bind-key -t vi-copy 'y' copy-pipe "xclip -i -sel p -f | xclip -i -sel c"
# P to paste, or shift-inser as it's in bothe buffers
unbind P
bind P paste-buffer

# Linux clipboard support #alts for later testing
#bind C-p run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer" 
#bind C-y run "tmux save-buffer - | xclip -i -selection clipboard"

# Pipe pane to log file
bind-key P pipe-pane -o "cat >>$HOME/#W-tmux.log" \; display-message "Toggled logging to $HOME/#W-tmux.log"

#open man page with /
bind / command-prompt "split-window -h 'exec man %%'"

# create 25% lower split
unbind t
bind t split-window -p 25

# act like vim
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

#quick switch
bind-key e      select-window -t editor
bind-key v      select-window -t vim
